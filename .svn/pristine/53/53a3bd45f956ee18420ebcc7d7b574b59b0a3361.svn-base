package br.com.pagga.chamado.service;

import java.io.InputStream;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.pagga.chamado.dao.ChamadoDAO;
import br.com.pagga.chamado.dao.HistoricoChamadoDAO;
import br.com.pagga.chamado.dao.MarcacaoChamadoDAO;
import br.com.pagga.chamado.dao.UsuarioDAO;
import br.com.pagga.chamado.dao.filter.ChamadoFilter;
import br.com.pagga.chamado.model.Chamado;
import br.com.pagga.chamado.model.HistoricoChamado;
import br.com.pagga.chamado.model.MarcacaoChamado;
import br.com.pagga.chamado.model.StatusChamado;
import br.com.pagga.chamado.model.Usuario;
import br.com.pagga.chamado.service.exception.BusinessException;

@SuppressWarnings("unused")
public class ChamadoService {

	private ChamadoDAO chamadoDAO;
	
	private HistoricoChamadoDAO historicoChamadoDAO;
	
	private MarcacaoChamadoDAO marcacaoChamadoDAO;
	
	private Chamado chamado;
	
	private MarcacaoChamado marcacaoChamado;
	
	private static final Logger logger = LoggerFactory.getLogger(ChamadoService.class);

	@Inject
	public ChamadoService(ChamadoDAO chamadoDAO, MarcacaoChamadoDAO marcacaoChamadoDAO, HistoricoChamadoDAO historicoChamadoDAO) {

		this.chamadoDAO = chamadoDAO;
		this.marcacaoChamadoDAO = marcacaoChamadoDAO;
		this.historicoChamadoDAO = historicoChamadoDAO;
	}

	public void aberturaChamado(Chamado chamado) {
		
		if ( StringUtils.isBlank(chamado.getTitulo()))
			throw new BusinessException("Titulo do chamado é obrigatório");
		
		if ( StringUtils.isBlank(chamado.getDescricao()))
			throw new BusinessException("Descrição do chamado é obrigatírio");
		
		if(chamado.getUsuario() == null)
			throw new BusinessException("Usuario não pode ser nulo");
		
		if(chamado.getMarcacaoChamadoList() == null || chamado.getMarcacaoChamadoList().isEmpty())
			throw new BusinessException("Por favor informar Marcações");
		
		if(chamado.getDataAbertura() == null) {
			chamado.setDataAbertura(new Date());
		}
		
		if(chamado.getStatus() == null) {
			chamado.setStatus(StatusChamado.ABERTO);
		}
		
		chamadoDAO.save(chamado);
		
		for (MarcacaoChamado marcacaoChamado : chamado.getMarcacaoChamadoList()) {
			marcacaoChamado.setChamado(chamado);
			marcacaoChamadoDAO.save(marcacaoChamado);
		}
		
		if(!chamado.getHistoricoChamadoList().isEmpty() || chamado.getHistoricoChamadoList() != null) {
			for (HistoricoChamado historicoChamado : chamado.getHistoricoChamadoList()) {
				historicoChamado.setChamado(chamado);
				salvaHistoricoChamado(historicoChamado);
			}
		}
		
		logger.info("Chamado {} aberto", chamado.getId());
		
	}
	
	public void salvarChamado(Chamado chamado) {
		try {
			chamadoDAO.save(chamado);
			logger.info("chamado " + chamado.getId() + "salvo com sucesso");
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
	}
	
	public void salvaHistoricoChamado(HistoricoChamado historicoChamado) {
		try {
			historicoChamadoDAO.save(historicoChamado);
			logger.info("Historico "+ historicoChamado.getId() + "relacionado ao chamado " + historicoChamado.getChamado().getId() 
					+ " aberto com sucesso");
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
	}
	
	public void acrescentarComentarioChamado(HistoricoChamado historicoChamado) {
		
		if ( StringUtils.isBlank(historicoChamado.getComentario()))
			throw new BusinessException("É preciso preencher o campo de comentário! ");
		try {
			
			chamado = historicoChamado.getChamado();
			chamadoDAO.findById(chamado.getId());
			
			if(chamado.getUsuario() != historicoChamado.getUsuario()) {
				chamado.setStatus(StatusChamado.EM_ATENDIMENTO);
				chamadoDAO.save(chamado);
			}
			
			historicoChamadoDAO.save(historicoChamado);
			logger.info("Historico salvo");
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
	}
	
	public void finalizandoChamado(HistoricoChamado historicoChamado) {
		
		if ( StringUtils.isBlank(historicoChamado.getComentario()))
			throw new BusinessException("É preciso prentencher o campo de comeário! ");
		try {
			
			chamado = historicoChamado.getChamado();
			
			if(chamado.getStatus() == StatusChamado.ABERTO) {
				chamado.setStatus(StatusChamado.CANCELADO);
			}else if(chamado.getStatus() == StatusChamado.EM_ATENDIMENTO) {
				chamado.setStatus(StatusChamado.FECHADO);
			}

			chamadoDAO.save(chamado);
			
			historicoChamadoDAO.save(historicoChamado);
			logger.info("Chamado Finalizado");
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
	}
	
	public List<Chamado> listaChamado() {
		try {
			return chamadoDAO.findAll();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
	public List<HistoricoChamado> listaHistorico(){
		try {
			return historicoChamadoDAO.findAll();
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
	
	public List<Chamado> buscaPorStatus(StatusChamado status) {
		try {
			return chamadoDAO.findByStatus(status);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}

	public Chamado buscaPorID(long id) {
		try {
			return chamadoDAO.findById(id);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
	public HistoricoChamado buscaHistoricoID(long id) {
		try {
			return historicoChamadoDAO.findById(id);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
	public List<Chamado> listaPorFiltro(ChamadoFilter filtro) {
		try {
			return chamadoDAO.findByFilter(filtro);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		
		return null;
	}

	public List<Chamado> listaChamadoPorUsuario(Usuario usuario) {
		try {
			return chamadoDAO.findByUsuario(usuario);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
	
	public Usuario buscaUsarioID(long id) {
		try {
			return chamadoDAO.getUsuarioDAO().findById(id);
		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		return null;
	}
}
