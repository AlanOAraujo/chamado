package br.com.pagga.chamado.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.caelum.vraptor.Consumes;
import br.com.caelum.vraptor.Controller;
import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.environment.Environment;
import br.com.caelum.vraptor.serialization.gson.WithoutRoot;
import br.com.pagga.chamado.dao.UsuarioDAO;
import br.com.pagga.chamado.model.Perfil;
import br.com.pagga.chamado.model.Usuario;
import br.com.pagga.chamado.model.UsuarioPerfil;
import br.com.pagga.chamado.service.UsuarioService;
import br.com.pagga.chamado.service.exception.BusinessException;

@Controller
@Path("/usuario")
public class UsuarioController extends PaggaController {

	@Inject
	UsuarioDAO usuarioDAO;
	
	@Inject
	UsuarioService usuarioService;
	
	@Inject
	Environment environment;
	
	private static final Logger logger = LoggerFactory.getLogger(UsuarioController.class);
	
	public UsuarioController() {
	}
	
	@Inject
	public UsuarioController(HttpServletRequest request, HttpServletResponse response, Result result,
			EntityManager entityManager) {
		super(request, response, result, entityManager);
	}
	
	@Get
	@Path("")
	public void listaUsuarios() {
		try {
			List<Usuario> findAll = usuarioDAO.findAll();
			
			if(findAll == null || findAll.isEmpty()) {
				
				createJSON().message("Usuário não encontrado").notFound();
				
			} else {
				
				List<JSONObject> jsonObjList = new ArrayList<>();
			
				for ( Usuario usuario : findAll ) {
					JSONObject jsonObject = createJSON().put("id", usuario.getId())
						.put("nome", usuario.getNome())
						.put("cpf", usuario.getCpf())
						.put("email", usuario.getEmail())
						.put("senha", usuario.getSenha())
						.put("dataCadastro", usuario.getDataCadastro())
						.build();
					
					jsonObjList.add(jsonObject);
				}	
				
				createJSON().put("usuarios", jsonObjList)
					.ok();
			}
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao listar usuarios").serverError(); 
		}
		
	}
	
	@Post
	@Path("/id")
	public void buscaUsuarioPorId(long id) {
	
		try {
		
			Usuario usuario = usuarioService.buscaPorID(id);
			
			if(usuario == null) {
				
				createJSON().message("Usuário não encontrado").notFound();
				
			} else {
				
				List<JSONObject> perfis = new ArrayList<>(); 
				
				if(usuario.getUsuarioPerfilList() != null && usuario.getUsuarioPerfilList().size() > 0) {
					for(UsuarioPerfil usuarioPerfil : usuario.getUsuarioPerfilList()) {
						
						JSONObject perfil = createJSON().put("id", usuarioPerfil.getPerfil().getId())
								.put("descricao", usuarioPerfil.getPerfil().getDescricao())
								.build();
						
						perfis.add(perfil);
					}
				}
	
				JSONObject jsonObject = createJSON().put("id", usuario.getId()).put("nome", usuario.getNome())
						.put("cpf", usuario.getCpf()).put("email", usuario.getEmail()).put("senha", usuario.getSenha())
						.put("dataCadastro", usuario.getDataCadastro())
						.put("situacao", usuario.isSituacao())
						.put("usuarioPerfilList", perfis)
						.build();
	
				createJSON().put("usuario", jsonObject).ok();
				
			}

		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao buscar usuario").serverError(); 
		}
	}
	
	@Post
	@Path("")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void cadastraUsuario(Usuario usuario) {
		try {
			usuarioService.cadastraUsuario(usuario);
			
			createJSON().put("id", usuario.getId())
			.put("msg", "Usuario cadastrado com sucesso").ok();
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao cadastrar usuario").serverError(); 
		}
	}
	
	@Post
	@Path("/altera")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void alteraUsuario(Usuario usuario) {
		try {
			usuarioService.alterarUsuario(usuario);

			createJSON().put("msg", "Usuario alterado com sucesso").ok();
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao alterar usuario").serverError(); 
		}
	}
	
	@Post
	@Path("/ativa")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void ativaUsuario(Usuario usuario) {
		try {
			usuarioService.ativaUsuario(usuario);

			createJSON().put("msg", "Usuario ativado com sucesso").ok();
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao ativar usuario").serverError(); 
		}
	}
	
	@Post
	@Path("/inativa")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void inativaUsuario(Usuario usuario) {
		try {
			usuarioService.inativaUsuario(usuario);

			createJSON().put("msg", "Usuario inativado com sucesso").ok();
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao listar usuarios").serverError();
		}
	}
	
}
