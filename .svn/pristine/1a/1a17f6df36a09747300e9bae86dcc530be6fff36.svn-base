package br.com.pagga.chamado.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.caelum.vraptor.Consumes;
import br.com.caelum.vraptor.Controller;
import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.observer.upload.UploadedFile;
import br.com.caelum.vraptor.serialization.gson.WithoutRoot;
import br.com.pagga.chamado.dao.filter.ChamadoFilter;
import br.com.pagga.chamado.model.Chamado;
import br.com.pagga.chamado.model.HistoricoChamado;
import br.com.pagga.chamado.service.ChamadoService;
import br.com.pagga.chamado.service.exception.BusinessException;

@Controller
@Path("/chamado")
public class ChamadoController extends PaggaController {

	private ChamadoService chamadoService;

	private static final Logger logger = LoggerFactory.getLogger(ChamadoController.class);
	
	public ChamadoController() {}
	
	@Inject
	public ChamadoController(HttpServletRequest request, HttpServletResponse response, Result result,
			EntityManager entityManager, ChamadoService chamadoService) {
		super(request, response, result, entityManager);
		this.chamadoService = chamadoService;
	}
	
	@Post
	@Path("")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void aberturaChamado(Chamado chamado) {
		
		try {
			chamadoService.aberturaChamado(chamado);
			createJSON().put("msg", "Chamado criado com sucesso! ").ok();
		} catch (BusinessException e) {
			logger.error(e.getMessage());
			createJSON().failure(e.getMessage()).serverError();
		} catch (Exception e) {
			logger.error(e.getMessage());
			createJSON().failure("Erro ao abrir chamado!").serverError();
		}
		
	}
	
	@Post
	@Path("/upload")
	public void uploudFile(long idChamado, UploadedFile file, String descricao) {
		try {
			
			Chamado chamado = chamadoService.buscaPorID(idChamado);
			
			HistoricoChamado historicoChamado = HistoricoChamado.create(chamado, descricao, chamado.getUsuario());
			
			historicoChamado.setAnexo(new byte[(int) file.getSize()]);
			
			chamadoService.carregarAnexo(file.getFile(), historicoChamado);
			
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
			
		} catch (Exception e) {
			logger.error(e.getMessage());
			createJSON().failure("Erro ao anexar arquivo!").serverError();
		}
		
	}
	
	@Post
	@Path("/filtro")
	@Consumes( value = "application/json", options=WithoutRoot.class )
	public void buscaChamadoPorFiltro(ChamadoFilter filtro) {
		try {
			List<Chamado> chamados = chamadoService.listaPorFiltro(filtro);
			
			if(chamados == null || chamados.isEmpty()) {
				
				createJSON().message("Chamado não encontrado encontrado").notFound();
				
			} else {
				
				List<JSONObject> jsonObjList = new ArrayList<>();
			
				for ( Chamado chamado : chamados) {
					JSONObject jsonObject = createJSON().put("id", chamado.getId())
						.put("titulo", chamado.getTitulo())
						.put("descricao", chamado.getDescricao())
						.put("status", chamado.getStatus().name())
						.put("nomeUsuario", chamado.getUsuario().getNome())
						.put("dataAbertura", chamado.getDataAbertura())
						.put("tipo", chamado.getTipo().getDescricao())
						.build();
					
					jsonObjList.add(jsonObject);
				}
				
				createJSON().put("chamados", jsonObjList)
					.ok();
			}
			
		} catch (BusinessException ex) {
			logger.error(ex.getMessage());
			createJSON().failure(ex.getMessage()).serverError();
		} catch (Exception ex) {
			logger.error(ex.getMessage());
			createJSON().failure("Erro ao buscar chamados").serverError();
		}
	}
	
}
