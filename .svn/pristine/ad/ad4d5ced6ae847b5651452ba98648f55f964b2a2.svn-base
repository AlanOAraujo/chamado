package br.com.pagga.chamado.service;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.caelum.stella.validation.CPFValidator;
import br.com.caelum.stella.validation.InvalidStateException;
import br.com.pagga.chamado.dao.UsuarioDAO;
import br.com.pagga.chamado.model.Usuario;
import br.com.pagga.chamado.service.exception.BusinessException;

public class UsuarioService {

	private UsuarioDAO usuarioDAO;
	
	private static final Logger logger = LoggerFactory.getLogger(UsuarioService.class);
	
	@Inject
	public UsuarioService(UsuarioDAO usuarioDAO) {
		this.usuarioDAO = usuarioDAO;
	}

	public void cadastraUsuario( Usuario usuario ) {
		
		CPFValidator validador = new CPFValidator(); 
		
		if ( StringUtils.isBlank(usuario.getNome()))
			throw new BusinessException("Nome do usuário é obrigatório");
		
		if (StringUtils.isBlank(usuario.getCpf())) 
			throw new BusinessException("CPF do usuário é obrigatório");
		
		try {
			validador.assertValid(usuario.getCpf());
		} catch (InvalidStateException e) {
			throw new BusinessException("CPF inválido | " + e.getInvalidMessages());
		}
		
		if (StringUtils.isBlank(usuario.getEmail())) 
			throw new BusinessException("Email do usuário é obrigatório");
		
		Usuario findByCPF = usuarioDAO.findByCPF(usuario.getCpf());
		Usuario findByEmail = usuarioDAO.findByEmail(usuario.getEmail());
		
		if ( findByCPF != null)
			throw new BusinessException(String.format("CPF %s já cadastrado", usuario.getCpf()));
		
		if(findByEmail != null)
			throw new BusinessException(String.format("Email %s já cadastrado", usuario.getEmail()));

		usuarioDAO.save(usuario);
		
		logger.info("Usuario {} salvo com sucesso!", usuario.getNome());
		
	}
	
	public void alterarUsuario( Usuario usuario ) {
		
		Usuario temporario = usuarioDAO.findById(usuario.getId());

		if ( !temporario.getCpf().equals(usuario.getCpf()) ) {
			throw new BusinessException( "Não pode alterar CPF" );
		} 
		else {
			usuarioDAO.save(usuario);
			
			logger.info("Usuario {} alterado com sucesso!", usuario.getNome());
		}
	}
	
	
	public void ativaUsuario(Usuario usuario) {
		
		usuario.ativarUsuario(usuario);
		
		this.situacaoUsuario(usuario);
		
		logger.info("Usuario {} ativo!", usuario.getNome());
	}
	
	public void inativaUsuario(Usuario usuario) {
		
		usuario.inativaUsuario(usuario);
		
		this.situacaoUsuario(usuario);
		
		if(usuario.getUsuarioPerfilList().size() > 0) {
			
		}
		
		logger.info("Usuario {} inativo!", usuario.getNome());
	}
	
	private void situacaoUsuario( Usuario usuario ) {
		
		usuario.setSituacao(!usuario.isSituacao());
		usuarioDAO.save(usuario);
	}
	
}
