package br.com.pagga.chamado.dao;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.com.pagga.chamado.dao.filter.ChamadoFilter;
import br.com.pagga.chamado.model.Chamado;
import br.com.pagga.chamado.model.StatusChamado;
import br.com.pagga.chamado.model.TipoChamado;
import br.com.pagga.chamado.model.Usuario;
import br.com.pagga.chamado.util.StringUtil;

public class ChamadoDAO extends AbstractDAO<Chamado> {
	
	@Inject
	private UsuarioDAO usuarioDAO;
	
	SimpleDateFormat  sdf = new SimpleDateFormat("dd/MM/yyyy");

	public ChamadoDAO() {
	}
	
	@Inject
	public ChamadoDAO(EntityManager entityManager) {
		super(entityManager);
	}
	
	public List<Chamado> findByUsuario(Usuario usuario) {


		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("usuario"), usuario));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {}
				
		return chamados;
	}
	
	public List<Chamado> findByStatus(StatusChamado status) {
		
		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("status"), status));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {
			
		}
				
		return chamados;
		
	}
	
	public List<Chamado> findByTipo(TipoChamado tipo) {
		
		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("tipo"), tipo));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {
			
		}
				
		return chamados;
		
	}
	
	public List<Chamado> findByFilter(ChamadoFilter filter) throws ParseException {
		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		List<Predicate> predicateList = new ArrayList<>();
		
		if ( filter.getId() != null ) {
			
			predicateList.add(builder.equal(root.get("id"), filter.getId()));
		}
		
		if ( !StringUtil.isNullOrEmpty(filter.getTitulo()) ) {
			
			predicateList.add(builder.like(builder.lower(root.get("titulo")),"%" + filter.getTitulo().toLowerCase()  + "%"));
		}
		
		if ( !StringUtil.isNullOrEmpty(filter.getDescricao()) ) {
			
			predicateList.add(builder.like(builder.lower(root.get("descricao")),"%" + filter.getDescricao().toLowerCase() + "%"));
		}
		
		if ( filter.get_dataAbertura() != null ) {
			Calendar c = Calendar.getInstance();
			c.setTime(sdf.parse(filter.get_dataAbertura()));
			c.add(Calendar.HOUR, 23);
			c.add(Calendar.MINUTE, 59);
			c.add(Calendar.SECOND, 59);
			c.add(Calendar.MILLISECOND, 999);
			
			Date d = c.getTime();
			
			predicateList.add(builder.between(root.get("dataAbertura"), sdf.parse(filter.get_dataAbertura()), d));
		}
		
		if ( filter.get_dataFechamento() != null ) {
			
			Calendar c = Calendar.getInstance();
			c.setTime(sdf.parse(filter.get_dataFechamento()));
			c.add(Calendar.HOUR, 23);
			c.add(Calendar.MINUTE, 59);
			c.add(Calendar.SECOND, 59);
			c.add(Calendar.MILLISECOND, 999);
			
			Date d = c.getTime();
			
			predicateList.add(builder.between(root.get("dataFechamento"), sdf.parse(filter.get_dataFechamento()), d));
		}
		
		if ( filter.getDataPrevisao() != null ) {
			Calendar c = Calendar.getInstance();
			c.setTime(sdf.parse(filter.getDataPrevisao()));
			c.add(Calendar.HOUR, 23);
			c.add(Calendar.MINUTE, 59);
			c.add(Calendar.SECOND, 59);
			c.add(Calendar.MILLISECOND, 999);
			
			Date d = c.getTime();
			
			predicateList.add(builder.between(root.get("dataPrevisao"), sdf.parse(filter.getDataPrevisao()), d));
		}
		
		if ( filter.getStatus() != null ) {
			predicateList.add(builder.equal(root.get("status"), filter.getStatus().getDescricao()));
		}
		
		if ( filter.getTipo() != null ) {
			
			predicateList.add(builder.equal(root.get("tipo"), filter.getTipo().getDescricao()));
		}
		
		if ( filter.getTipoDescricao() != null ) {
			
			predicateList.add(builder.equal(root.get("tipo"), TipoChamado.valueOf(filter.getTipoDescricao())));
		}
		
		if ( filter.getUsuario() != null ) {
			predicateList.add(builder.equal(root.get("usuario"),filter.getUsuario()));
		}
		
		if ( filter.getNomeUsuario() != null ) {
			List<Usuario> buscaUsuario = usuarioDAO.findByNome(filter.getNomeUsuario());
			predicateList.add(builder.equal(root.get("usuario"),buscaUsuario));
		}
		
		if ( filter.getUsuarioFechamento() != null ) {
			predicateList.add(builder.equal(root.get("usuarioFechamento"),filter.getUsuarioFechamento()));
		}
		
		if ( filter.getNomeUsuarioFechamento() != null ) {
			List<Usuario> buscaUsuario = usuarioDAO.findByNome(filter.getNomeUsuarioFechamento());
			predicateList.add(builder.equal(root.get("usuarioFechamento"),buscaUsuario));
		}
		
		criteria.select(root).where(predicateList.toArray(new Predicate[] {}));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		if ( filter.getStart() > 0 )
			query.setFirstResult(filter.getStart());
		
		if ( filter.getLimit() > 0 )
			query.setMaxResults(filter.getLimit());
		
		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {}
				
		return chamados;
	}

	public UsuarioDAO getUsuarioDAO() {
		return usuarioDAO;
	}

	public void setUsuarioDAO(UsuarioDAO usuarioDAO) {
		this.usuarioDAO = usuarioDAO;
	}
	
}
