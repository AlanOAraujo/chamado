package br.com.pagga.chamado.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.com.pagga.chamado.dao.filter.ChamadoFilter;
import br.com.pagga.chamado.model.Chamado;
import br.com.pagga.chamado.model.StatusChamado;
import br.com.pagga.chamado.model.Usuario;
import br.com.pagga.chamado.util.StringUtil;

public class ChamadoDAO extends AbstractDAO<Chamado> {

	public ChamadoDAO() {
	}
	
	@Inject
	public ChamadoDAO(EntityManager entityManager) {
		super(entityManager);
	}
	
	public List<Chamado> findByUsuario(Usuario usuario) {


		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("usuario"), usuario));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {}
				
		return chamados;
	}
	
//	public List<Chamado> findByStatus(StatusChamado status) {
//		CriteriaBuilder builder = entityManager.getCriteriaBuilder();
//
//		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());
//
//		Root<Chamado> root = criteria.from(getClazz());
//
//		criteria.select(root).where(builder.equal(root.get("status"), status));
//
//		TypedQuery<Chamado> query = entityManager.createQuery(criteria);
//
//		List<Chamado> chamados = null; 
//				
//		try {
//			chamados = query.getResultList();
//		}
//		catch (NoResultException ex) {}
//				
//		return chamados;
//		
//		ChamadoFilter filter = new ChamadoFilter();
//		filter.withDataInicio(null);
//		
//		return this.findByFilter(filter);
//		
//	}
	
	public List<Chamado> findByFilter(ChamadoFilter filter) {
		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Chamado> criteria = builder.createQuery(getClazz());

		Root<Chamado> root = criteria.from(getClazz());

		List<Predicate> predicateList = new ArrayList<>();
		
		if ( filter.getId() != null ) {
			
			predicateList.add(builder.equal(root.get("id"), filter.getId()));
		}
		
		if ( !StringUtil.isNullOrEmpty(filter.getTitulo()) ) {
			
			predicateList.add(builder.equal(root.get("titulo"), filter.getTitulo()));
		}
		
		if ( !StringUtil.isNullOrEmpty(filter.getDescricao()) ) {
			
			predicateList.add(builder.equal(root.get("descricao"), filter.getDescricao()));
		}
		
		if ( filter.getDataAbertura() != null ) {
			
			predicateList.add(builder.equal(root.get("dataAbertura"), filter.getDataAbertura()));
//			predicateList.add(builder.equal(root.get("usuario"), filter.getUsuarioDoChamado()));
		}
		
		if ( filter.getDataFechamento() != null ) {
			
			predicateList.add(builder.equal(root.get("dataFechamento"), filter.getDataFechamento()));
		}
		
		if ( filter.getStatus() != null ) {
			
			predicateList.add(builder.equal(root.get("status"), filter.getStatus()));
		}
		
		if ( filter.getTipo() != null ) {
			
			predicateList.add(builder.equal(root.get("tipo"), filter.getTipo()));
		}
		
		if ( filter.getUsuario() != null ) {
			
			predicateList.add(builder.equal(root.get("usuario"), filter.getUsuario()));
		}
		
		if ( filter.getUsuarioFechamento() != null ) {
			
			predicateList.add(builder.equal(root.get("usuarioFechamento"), filter.getUsuarioFechamento()));
		}
		
		criteria.select(root).where(predicateList.toArray(new Predicate[] {}));

		TypedQuery<Chamado> query = entityManager.createQuery(criteria);

		if ( filter.getStart() > 0 )
			query.setFirstResult(filter.getStart());
		
		if ( filter.getLimit() > 0 )
			query.setMaxResults(filter.getLimit());
		
		List<Chamado> chamados = null; 
				
		try {
			chamados = query.getResultList();
		}
		catch (NoResultException ex) {}
				
		return chamados;
	}
	
	
}
