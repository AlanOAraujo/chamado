package br.com.pagga.chamado.dao;

import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import br.com.pagga.chamado.model.Usuario;

public class UsuarioDAO extends AbstractDAO<Usuario> {

	public UsuarioDAO() {
	}
	
	@Inject
	public UsuarioDAO(EntityManager entityManager) {
		super(entityManager);
	}

	public Usuario findByCPF( String cpf ) {

		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Usuario> criteria = builder.createQuery(getClazz());

		Root<Usuario> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("cpf"), cpf));

		TypedQuery<Usuario> query = entityManager.createQuery(criteria);

		Usuario usuario = null; 
				
		try {
			usuario = query.getSingleResult();
		}
		catch (NoResultException ex) {}
				
		return usuario;
	}
	
	public List<Usuario> findByNome( String nome ) {

		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Usuario> criteria = builder.createQuery(getClazz());

		Root<Usuario> root = criteria.from(getClazz());

		criteria.select(root).where(builder.like(builder.lower(root.get("nome")), "%" + nome.toLowerCase() + "%"));

		TypedQuery<Usuario> query = entityManager.createQuery(criteria);

		List<Usuario> usuarios = null; 
				
		try {
			usuarios = query.getResultList();
		}
		catch (NoResultException ex) {
			return null;
		}
				
		return usuarios;
	}
	
	public Usuario findByEmail(String email) {
		
		CriteriaBuilder builder = entityManager.getCriteriaBuilder();

		CriteriaQuery<Usuario> criteria = builder.createQuery(getClazz());

		Root<Usuario> root = criteria.from(getClazz());

		criteria.select(root).where(builder.equal(root.get("email"), email));

		TypedQuery<Usuario> query = entityManager.createQuery(criteria);

		Usuario usuario = null;
		
		try {
			usuario = query.getSingleResult();
		}
		catch ( NoResultException ex ) {}
		
		return usuario;
	}
	
}
